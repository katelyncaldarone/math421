#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020 & No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020 & No_of_Votes = votesQ3) %>%
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020 & No_of_Votes == votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020 & No_of_Votes == votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020 & No_of_Votes == votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = FALSE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020 %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes == votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
votesQ3
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes == votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2021, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2023, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 1998, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
if (nrow(movies_in_2020_with_Q3_votes) > 0) {
# Calculate the average Meta score for those movies
result <- movies_in_2020_with_Q3_votes %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
} else {
result <- "No movies in 2020 with votes in the third quartile."
}
# Calculate the third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
# Check if there are movies in 2020 with votes in the third quartile
movies_in_2020_with_Q3_votes <- df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3)
if (nrow(movies_in_2020_with_Q3_votes) > 0) {
# Calculate the average Meta score for those movies
result <- movies_in_2020_with_Q3_votes %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
} else {
result <- "No movies in 2020 with votes in the third quartile."
}
print(result)
#Only one movie has a number of votes in the third quartile, thus,
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
votesQ3 <- quantile(df$No_of_Votes, 1.00, na.rm = TRUE)
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#Only one movie has a number of votes in the third quartile, thus,
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
votesQ4 <- quantile(df$No_of_Votes, 1.00, na.rm = TRUE)
votesQ4
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#Only one movie has a number of votes in the third quartile, thus,
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
votesQ3
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#No movies meet the specified criteria, thus, we get a NaN result when calculate the average Meta score in 2020 of movies w/ number of votes in Q3.
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(Average_Runtime_2010s = mean(Runtime, na.rm = TRUE))
library(tidyverse)
df %>%
mutate(Runtime = as.numeric(str_remove(Runtime, " min")))
average_running_time_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(Average_Runtime_2010s = mean(Runtime, na.rm = TRUE))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
df %>%
mutate(df$Runtime = as.numeric(str_remove(Runtime, " min")))
library(tidyverse)
df %>%
mutate(df$Runtime == as.numeric(str_remove(Runtime, " min")))
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs", na.rm=TRUE)
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
#remove rows with missing values
df %>%
filter(complete.cases(Runtime, IMDB_Rating))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating)
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
#remove rows with missing values
df %>%
filter(complete.cases(Runtime, IMDB_Rating))
# Calculate the correlation between running time and rating
correlation <- cor(df$Runtime, df$IMDB_Rating)
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime)
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime))
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
#filter out rows with missing variables
df %>%
filter(!is.na(Runtime) & !is.na(IMDB_Rating))
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime, na.rm = TRUE))
library(tidyverse)
#use str_remove to remove 'min' from Runtime variable
df %>%
mutate(Runtime = str_remove(Runtime, " min"))
#covert Runtime variable to numeric
df$Runtime <- as.numeric(df$Runtime)
#filter out rows with missing variables
df %>%
filter(!is.na(Runtime) & !is.na(IMDB_Rating))
# Calculate the average running time in the 2010s
df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime))
library(tidyverse)
# Use str_remove to remove ' min' from Runtime variable
df <- df %>%
mutate(Runtime = str_remove(Runtime, " min"))
# Filter out rows with missing values in IMDB_Rating
df_filtered <- df %>%
filter(!is.na(IMDB_Rating))
# Detect non-numeric values in the Runtime column
non_numeric_runtime <- df_filtered %>%
filter(!str_detect(Runtime, "^[0-9.]*$"))
# Print non-numeric values (if any)
if (nrow(non_numeric_runtime) > 0) {
cat("Non-numeric values in Runtime column:\n")
print(non_numeric_runtime)
} else {
# Convert the Runtime column to numeric
df_filtered$Runtime <- as.numeric(df_filtered$Runtime)
# Calculate the average running time in the 2010s
average_running_time_2010s <- df_filtered %>%
filter(Released_Year >= 2010 & Released_Year <= 2019) %>%
summarise(averageRunningTimes2010s = mean(Runtime))
# Calculate the correlation between running time and rating
correlation <- cor(df_filtered$Runtime, df_filtered$IMDB_Rating)
# Print the results
print(average_running_time_2010s)
print(correlation)
}
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
(df_2010s$Runtime, na.rm = TRUE)
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
df_complete <- na.omit(df)
# Calculate the correlation between running time and rating, ignoring missing values
cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
cor(df$Runtime, df$IMDB_Rating, use = complete.cases)
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
correlation
average_running_time_2010s
summary(df$Runtime)
summary(df$IMDB_Rating)
summary(df$Runtime)
df$Runtime <- as.numeric(df$Runtime)
summary(df$IMDB_Rating)
knitr::opts_chunk$set(message = FALSE)
#Import tidyverse package
library(tidyverse)
#Import the data set
setwd('C:\\Users\\student\\OneDrive - Bryant University\\2023-2024\\Semester 1\\MATH421-A Statistical Analysis with R\\Data')
df <- read_csv('imdb_top_1000.csv')
str(df)
colnames(df)
df %>%
group_by(Series_Title) %>%
summarise(highestGrossEarnings = max(Gross)) %>%
arrange(-highestGrossEarnings)
df %>%
group_by(Series_Title) %>%
summarise(lowestRating = min(IMDB_Rating))%>%
arrange(lowestRating)
#5 movies with this lowest rating include 21 Grams, 25th Hour, 28 Days Later..., 300, 50/50.
#2014 has the most number of movies released in the list.
df %>%
group_by(Released_Year) %>%
count() %>%
arrange(-n)
#total money earned in 2014
df %>%
filter(Released_Year == '2014') %>%
summarize(Total_Earnings = sum(Gross, na.rm=TRUE))
df %>%
summarise(Average_Earnings = mean(Gross, na.rm = TRUE))
#Average number of votes by year:
df %>%
group_by(Released_Year) %>%
summarise(Average_Votes = mean(No_of_Votes, na.rm = TRUE))
df %>%
filter(IMDB_Rating > 9) %>%
summarise(averageVotes_highRating = mean(No_of_Votes, na.rm = TRUE))
#third quartile of votes
votesQ3 <- quantile(df$No_of_Votes, 0.75, na.rm = TRUE)
votesQ3
#average Meta score in 2020 of movies w/ number of votes in Q3
df %>%
filter(Released_Year == 2020, No_of_Votes >= votesQ3) %>%
summarise(Average_Meta_Score_2020 = mean(Meta_score, na.rm = TRUE))
#No movies meet the specified criteria, thus, we get a NaN result when calculate the average Meta score in 2020 of movies w/ number of votes in Q3.
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
summary(df%Runtime)
library(tidyverse)
summary(df$Runtime)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
average_running_time_2010s
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "pairwise.complete.obs")
correlation
library(tidyverse)
# Remove " min" from the Runtime variable and convert it to numeric
df$Runtime <- as.numeric(str_remove(df$Runtime, " min"))
# Filter the data for the 2010s
df_2010s <- df %>%
filter(Released_Year >= 2010 & Released_Year <= 2019)
# Calculate the average running time in the 2010s
average_running_time_2010s <- mean(df_2010s$Runtime, na.rm = TRUE)
average_running_time_2010s
# Calculate the correlation between running time and rating, ignoring missing values
correlation <- cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
correlation
